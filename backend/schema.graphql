# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  isAdmin: Boolean
  passwordResetToken: PasswordState
  passwordResetIssuedAt: DateTime
  passwordResetRedeemedAt: DateTime
}

type PasswordState {
  isSet: Boolean!
}

scalar DateTime
  @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  isAdmin: BooleanFilter
  passwordResetToken: PasswordFilter
  passwordResetIssuedAt: DateTimeNullableFilter
  passwordResetRedeemedAt: DateTimeNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input PasswordFilter {
  isSet: Boolean!
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  isAdmin: OrderDirection
  passwordResetIssuedAt: OrderDirection
  passwordResetRedeemedAt: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  isAdmin: Boolean
  passwordResetToken: String
  passwordResetIssuedAt: DateTime
  passwordResetRedeemedAt: DateTime
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  isAdmin: Boolean
  passwordResetToken: String
  passwordResetIssuedAt: DateTime
  passwordResetRedeemedAt: DateTime
}

type Catalogue {
  id: ID!
  name: String
  image: ImageFieldOutput
  catalogueItem(
    where: CatalogueItemWhereInput! = {}
    orderBy: [CatalogueItemOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [CatalogueItem!]
  catalogueItemCount(where: CatalogueItemWhereInput! = {}): Int
}

interface ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  ref: String!
  url: String!
}

enum ImageExtension {
  jpg
  png
  webp
  gif
}

input CatalogueWhereUniqueInput {
  id: ID
}

type LocalImageFieldOutput implements ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  ref: String!
  url: String!
}

type CloudImageFieldOutput implements ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  ref: String!
  url: String!
}

input CatalogueWhereInput {
  AND: [CatalogueWhereInput!]
  OR: [CatalogueWhereInput!]
  NOT: [CatalogueWhereInput!]
  id: IDFilter
  name: StringFilter
  catalogueItem: CatalogueItemManyRelationFilter
}

input CatalogueItemManyRelationFilter {
  every: CatalogueItemWhereInput
  some: CatalogueItemWhereInput
  none: CatalogueItemWhereInput
}

input CatalogueOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input CatalogueUpdateInput {
  name: String
  image: ImageFieldInput
  catalogueItem: CatalogueItemRelateToManyForUpdateInput
}

input ImageFieldInput {
  upload: Upload
  ref: String
}

"""
The `Upload` scalar type represents a file upload.
"""
scalar Upload

input CatalogueItemRelateToManyForUpdateInput {
  disconnect: [CatalogueItemWhereUniqueInput!]
  set: [CatalogueItemWhereUniqueInput!]
  create: [CatalogueItemCreateInput!]
  connect: [CatalogueItemWhereUniqueInput!]
}

input CatalogueUpdateArgs {
  where: CatalogueWhereUniqueInput!
  data: CatalogueUpdateInput!
}

input CatalogueCreateInput {
  name: String
  image: ImageFieldInput
  catalogueItem: CatalogueItemRelateToManyForCreateInput
}

input CatalogueItemRelateToManyForCreateInput {
  create: [CatalogueItemCreateInput!]
  connect: [CatalogueItemWhereUniqueInput!]
}

type CatalogueItem {
  id: ID!
  name: String
  responsiveImageLink: String
  martiniImageLink: String
  catalogue: Catalogue
}

input CatalogueItemWhereUniqueInput {
  id: ID
}

input CatalogueItemWhereInput {
  AND: [CatalogueItemWhereInput!]
  OR: [CatalogueItemWhereInput!]
  NOT: [CatalogueItemWhereInput!]
  id: IDFilter
  name: StringFilter
  responsiveImageLink: StringFilter
  martiniImageLink: StringFilter
  catalogue: CatalogueWhereInput
}

input CatalogueItemOrderByInput {
  id: OrderDirection
  name: OrderDirection
  responsiveImageLink: OrderDirection
  martiniImageLink: OrderDirection
}

input CatalogueItemUpdateInput {
  name: String
  responsiveImageLink: String
  martiniImageLink: String
  catalogue: CatalogueRelateToOneForUpdateInput
}

input CatalogueRelateToOneForUpdateInput {
  create: CatalogueCreateInput
  connect: CatalogueWhereUniqueInput
  disconnect: Boolean
}

input CatalogueItemUpdateArgs {
  where: CatalogueItemWhereUniqueInput!
  data: CatalogueItemUpdateInput!
}

input CatalogueItemCreateInput {
  name: String
  responsiveImageLink: String
  martiniImageLink: String
  catalogue: CatalogueRelateToOneForCreateInput
}

input CatalogueRelateToOneForCreateInput {
  create: CatalogueCreateInput
  connect: CatalogueWhereUniqueInput
}

type Technology {
  id: ID!
  field1_heading: String
  field1_content: String
  field2_heading: String
  field2_content: String
  field3_heading: String
  field3_content: String
  field4_heading: String
  field4_content: String
}

input TechnologyWhereUniqueInput {
  id: ID
}

input TechnologyWhereInput {
  AND: [TechnologyWhereInput!]
  OR: [TechnologyWhereInput!]
  NOT: [TechnologyWhereInput!]
  id: IDFilter
  field1_heading: StringFilter
  field1_content: StringFilter
  field2_heading: StringFilter
  field2_content: StringFilter
  field3_heading: StringFilter
  field3_content: StringFilter
  field4_heading: StringFilter
  field4_content: StringFilter
}

input TechnologyOrderByInput {
  id: OrderDirection
  field1_heading: OrderDirection
  field1_content: OrderDirection
  field2_heading: OrderDirection
  field2_content: OrderDirection
  field3_heading: OrderDirection
  field3_content: OrderDirection
  field4_heading: OrderDirection
  field4_content: OrderDirection
}

input TechnologyUpdateInput {
  field1_heading: String
  field1_content: String
  field2_heading: String
  field2_content: String
  field3_heading: String
  field3_content: String
  field4_heading: String
  field4_content: String
}

input TechnologyUpdateArgs {
  where: TechnologyWhereUniqueInput!
  data: TechnologyUpdateInput!
}

input TechnologyCreateInput {
  field1_heading: String
  field1_content: String
  field2_heading: String
  field2_content: String
  field3_heading: String
  field3_content: String
  field4_heading: String
  field4_content: String
}

type Page {
  id: ID!
  name: String
  content: Page_content_Document
}

type Page_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input PageWhereUniqueInput {
  id: ID
}

input PageWhereInput {
  AND: [PageWhereInput!]
  OR: [PageWhereInput!]
  NOT: [PageWhereInput!]
  id: IDFilter
  name: StringFilter
}

input PageOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input PageUpdateInput {
  name: String
  content: JSON
}

input PageUpdateArgs {
  where: PageWhereUniqueInput!
  data: PageUpdateInput!
}

input PageCreateInput {
  name: String
  content: JSON
}

type SocialMediaIcon {
  id: ID!
  name: String
  url: String
}

input SocialMediaIconWhereUniqueInput {
  id: ID
}

input SocialMediaIconWhereInput {
  AND: [SocialMediaIconWhereInput!]
  OR: [SocialMediaIconWhereInput!]
  NOT: [SocialMediaIconWhereInput!]
  id: IDFilter
  name: StringFilter
  url: StringFilter
}

input SocialMediaIconOrderByInput {
  id: OrderDirection
  name: OrderDirection
  url: OrderDirection
}

input SocialMediaIconUpdateInput {
  name: String
  url: String
}

input SocialMediaIconUpdateArgs {
  where: SocialMediaIconWhereUniqueInput!
  data: SocialMediaIconUpdateInput!
}

input SocialMediaIconCreateInput {
  name: String
  url: String
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createCatalogue(data: CatalogueCreateInput!): Catalogue
  createCatalogues(data: [CatalogueCreateInput!]!): [Catalogue]
  updateCatalogue(
    where: CatalogueWhereUniqueInput!
    data: CatalogueUpdateInput!
  ): Catalogue
  updateCatalogues(data: [CatalogueUpdateArgs!]!): [Catalogue]
  deleteCatalogue(where: CatalogueWhereUniqueInput!): Catalogue
  deleteCatalogues(where: [CatalogueWhereUniqueInput!]!): [Catalogue]
  createCatalogueItem(data: CatalogueItemCreateInput!): CatalogueItem
  createCatalogueItems(data: [CatalogueItemCreateInput!]!): [CatalogueItem]
  updateCatalogueItem(
    where: CatalogueItemWhereUniqueInput!
    data: CatalogueItemUpdateInput!
  ): CatalogueItem
  updateCatalogueItems(data: [CatalogueItemUpdateArgs!]!): [CatalogueItem]
  deleteCatalogueItem(where: CatalogueItemWhereUniqueInput!): CatalogueItem
  deleteCatalogueItems(
    where: [CatalogueItemWhereUniqueInput!]!
  ): [CatalogueItem]
  createTechnology(data: TechnologyCreateInput!): Technology
  createTechnologies(data: [TechnologyCreateInput!]!): [Technology]
  updateTechnology(
    where: TechnologyWhereUniqueInput!
    data: TechnologyUpdateInput!
  ): Technology
  updateTechnologies(data: [TechnologyUpdateArgs!]!): [Technology]
  deleteTechnology(where: TechnologyWhereUniqueInput!): Technology
  deleteTechnologies(where: [TechnologyWhereUniqueInput!]!): [Technology]
  createPage(data: PageCreateInput!): Page
  createPages(data: [PageCreateInput!]!): [Page]
  updatePage(where: PageWhereUniqueInput!, data: PageUpdateInput!): Page
  updatePages(data: [PageUpdateArgs!]!): [Page]
  deletePage(where: PageWhereUniqueInput!): Page
  deletePages(where: [PageWhereUniqueInput!]!): [Page]
  createSocialMediaIcon(data: SocialMediaIconCreateInput!): SocialMediaIcon
  createSocialMediaIcons(
    data: [SocialMediaIconCreateInput!]!
  ): [SocialMediaIcon]
  updateSocialMediaIcon(
    where: SocialMediaIconWhereUniqueInput!
    data: SocialMediaIconUpdateInput!
  ): SocialMediaIcon
  updateSocialMediaIcons(data: [SocialMediaIconUpdateArgs!]!): [SocialMediaIcon]
  deleteSocialMediaIcon(
    where: SocialMediaIconWhereUniqueInput!
  ): SocialMediaIcon
  deleteSocialMediaIcons(
    where: [SocialMediaIconWhereUniqueInput!]!
  ): [SocialMediaIcon]
  endSession: Boolean!
  authenticateUserWithPassword(
    email: String!
    password: String!
  ): UserAuthenticationWithPasswordResult
  createInitialUser(
    data: CreateInitialUserInput!
  ): UserAuthenticationWithPasswordSuccess!
  sendUserPasswordResetLink(email: String!): Boolean!
  redeemUserPasswordResetToken(
    email: String!
    token: String!
    password: String!
  ): RedeemUserPasswordResetTokenResult
}

union UserAuthenticationWithPasswordResult =
    UserAuthenticationWithPasswordSuccess
  | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type RedeemUserPasswordResetTokenResult {
  code: PasswordResetRedemptionErrorCode!
  message: String!
}

enum PasswordResetRedemptionErrorCode {
  FAILURE
  TOKEN_EXPIRED
  TOKEN_REDEEMED
}

type Query {
  users(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  catalogues(
    where: CatalogueWhereInput! = {}
    orderBy: [CatalogueOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Catalogue!]
  catalogue(where: CatalogueWhereUniqueInput!): Catalogue
  cataloguesCount(where: CatalogueWhereInput! = {}): Int
  catalogueItems(
    where: CatalogueItemWhereInput! = {}
    orderBy: [CatalogueItemOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [CatalogueItem!]
  catalogueItem(where: CatalogueItemWhereUniqueInput!): CatalogueItem
  catalogueItemsCount(where: CatalogueItemWhereInput! = {}): Int
  technologies(
    where: TechnologyWhereInput! = {}
    orderBy: [TechnologyOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Technology!]
  technology(where: TechnologyWhereUniqueInput!): Technology
  technologiesCount(where: TechnologyWhereInput! = {}): Int
  pages(
    where: PageWhereInput! = {}
    orderBy: [PageOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Page!]
  page(where: PageWhereUniqueInput!): Page
  pagesCount(where: PageWhereInput! = {}): Int
  socialMediaIcons(
    where: SocialMediaIconWhereInput! = {}
    orderBy: [SocialMediaIconOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [SocialMediaIcon!]
  socialMediaIcon(where: SocialMediaIconWhereUniqueInput!): SocialMediaIcon
  socialMediaIconsCount(where: SocialMediaIconWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
  validateUserPasswordResetToken(
    email: String!
    token: String!
  ): ValidateUserPasswordResetTokenResult
}

union AuthenticatedItem = User

type ValidateUserPasswordResetTokenResult {
  code: PasswordResetRedemptionErrorCode!
  message: String!
}

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
